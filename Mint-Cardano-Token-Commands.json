#Commands for one-time mint of Cardano native assets (tokens), with no residual ADA left in the payment address used to mint the tokens. 
#(all remaining ADA goes to receiver address with the tokens.  No ADA left behind.)
#See video walkthrough of these instructions https://youtu.be/lZBGTY_luzo
______________________________________

export CARDANO_NODE_SOCKET_PATH="/HOME/relay1/cardano-node/db/socket"

______________________________________

#Update 07 Jan 2022.  Asset name process has changed.  The command below will turn your asset name into a string of characters called a base16 code.  Use this base16 string to populate "tokenname" in the next command.

echo -n "QuantumAI" | xxd -ps

______________________________________

tokenname="QuantumAI"
tokenamount="1000000000"
fee="0"
output="0"
receiver="addr1qxcnwkghum3wkl0dcsuf07p3ttmfj2cdhf3d9ujen0a6p2hdfqvllshkfnsten38sesjk8086003suavfv4zm0tfjcfsu7jnvf"

______________________________________

cardano-cli address key-gen --verification-key-file payment.vkey --signing-key-file payment.skey

______________________________________

cardano-cli address build --payment-verification-key-file payment.vkey --out-file payment.addr --mainnet

______________________________________

#Send 2ADA to the above address - payment.addr

______________________________________

cardano-cli query protocol-parameters --mainnet --out-file protocol.json

______________________________________

mkdir policy

______________________________________

cardano-cli address key-gen --verification-key-file policy.vkey --signing-key-file policy.skey

______________________________________

touch policy/policy.script && echo "" > policy/policy.script

______________________________________

#Paste below into script file (located in your cardano-my-node policy directory) and save.

{
  "type": "all",
  "scripts": [
    {
      "type": "before",
      "slot": 52714568
    },
    {
      "keyHash": "39a1df51147b6de6689a4727846962fb6540c3a3c7859a1a79b9420f",
      "type": "sig"
    }
  ]
}

______________________________________

scriptpath="/HOME/relay1/cardano-node/policy.script"

______________________________________
#Run below command and paste output into above script "keyHash" field

cardano-cli address key-hash --payment-verification-key-file policy.vkey

______________________________________
#Run below command and paste output into above script "slot" section, plus add 2000 slots (33 minutes) and save.

cardano-cli query tip --mainnet

______________________________________

cardano-cli transaction policyid --script-file ./policy/policy.script >> policy/policyID

______________________________________

cardano-cli query utxo --address $(cat payment.addr) --mainnet

______________________________________

#Use the info from the above command to populate these values.
txhash="b4ce5b51def25f0053047a773473c16193ed8302f5f79f7db35f606add8cca0c"
txix="0"
funds="2000000"
policyid=$(cardano-cli transaction policyid --script-file ./policy/policy.script)

______________________________________

currentSlot=$(cardano-cli query tip --mainnet | jq -r '.slot')
echo Current Slot: $currentSlot

______________________________________

cardano-cli transaction build-raw \
 --tx-in $txhash#$txix \
 --tx-out $receiver+$output+"$tokenamount $policyid.$tokenname" \
 --mint "$tokenamount $policyid.$tokenname" \
 --minting-script-file $scriptpath \
 --invalid-hereafter $(( ${currentSlot} + 1000)) \
 --fee $fee \
 --out-file tx.raw

______________________________________

minfee=$(cardano-cli transaction calculate-min-fee \
--tx-body-file tx.raw \
--tx-in-count 1 \
--tx-out-count 1 \
--mainnet \
--witness-count 1 \
--byron-witness-count 0 \
--protocol-params-file protocol.json | awk '{ print $1 }')

______________________________________

output=$((${funds}-${minfee}))

______________________________________

cardano-cli transaction build-raw \
 --tx-in $txhash#$txix \
 --tx-out $receiver+$output+"$tokenamount $policyid.$tokenname" \
 --mint "$tokenamount $policyid.$tokenname" \
 --minting-script-file $scriptpath \
 --invalid-hereafter $(( ${currentSlot} + 1000)) \
 --fee $minfee \
 --out-file tx.raw

______________________________________

cardano-cli transaction sign \
 --tx-body-file tx.raw \
 --signing-key-file policy.skey \
 --signing-key-file payment.skey \
 --mainnet \
 --out-file tx.signed

______________________________________
 
cardano-cli transaction submit \
 --tx-file tx.signed \
 --mainnet

______________________________________